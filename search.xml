<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java虚拟机（JVM）内存初学]]></title>
    <url>%2F2019%2F02%2F13%2Fjvm%2F</url>
    <content type="text"><![CDATA[java虚拟机（JVM）堆、栈、方法区的介绍 JVM的基本结构图： 由图可知，JVM的内存区域主要可以划分为5块： JVM栈 (Java Virtual Machine Stacks) 堆内存 (Heap Memory) 方法区 (Method Area) 本地方法栈 (Native Method Stacks) 程序计数器 (Program Counter (PC) Register) 一、JVM栈 程序是在栈内存中运行的，所以栈内存解决的是程序运行时的问题 Java以栈帧为单位保存线程的运行状态，虚拟机只会对栈执行两种操作：以栈帧为单位的压栈或者出栈 一个线程独占一个Java栈（栈里的数据是线程私有的） 存储的是基本数据类型和堆中数据的引用（引用地址） 分为三个部分：基本类型变量区、执行环境上下文、操作指令区 异常：java.lang.StackOverFlowError 二、堆 堆内存解决的是数据存储的问题 所有线程共享java堆 存储的是对象和数组（对象本身） 动态的分配内存（运行时分配），生命周期（不确定）不需要预先告诉编译器，Java的垃圾回收机制会自动收走不使用的数据 由于运行时动态分配内存，存储数据较慢 异常：java.lang.OutOfMemoryError 三、方法区 又称静态区 存储每个类的信息（包括类名、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码 四、本地方法栈和java栈的作用差不多，只不过是为JVM使用到的native方法(使用非Java语言实现的方法)服务的 五、程序计数器 用于保存当前线程执行的内存地址 由于JVM程序是多线程执行的（线程轮流切换），所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的 注意这个区域是唯一一个不抛出OutOfMemoryError的运行时数据区 下面通过AppMain.java和Sample.java两块代码进一步说明 1234567891011//运行时, jvm把AppMain的信息都放入方法区public class AppMain &#123; //main 方法本身放入方法区 public static void main(String[] args) &#123; //test1是引用，所以放到栈区里，Sample是自定义对象应该放到堆里面 Sample test1 = new Sample("测试1"); Sample test2 = new Sample("测试2"); test1.printName(); test2.printName(); &#125;&#125; 12345678910111213141516//运行时, jvm把Sample的信息都放入方法区public class Sample &#123; //new Sample实例后， name 引用放入栈区里， name 对象放入堆里 private String name; /** 构造方法 */ public Sample(String name) &#123; this.name = name; &#125; /** 输出 */ //print方法本身放入方法区里 public void printName() &#123; System.out.println(name); &#125;&#125; 启动虚拟机进程，程序从AppMain的开始，先从classpath中找到并读取AppMain.class二进制文件（编译后），然后把AppMain类的类信息和方法信息放入方法区，这个过程叫AppMain类的加载过程； Java虚拟机定位到方法区AppMain类中的main()方法的字节码，开始执行它的指令，第一条语句是： 1Sample test1 = new Sample("测试1"); 接着Java虚拟机到方法区中查找Sample类的信息，没有找到，然后通过步骤1重新加载Sample类到方法区； 在堆中为Sample对象实例分配内存，这个实例持有指向方法区的Sample类的信息的引用（引用是指Sample类的信息在方法区中的内存地址） 每一个线程都有一个栈，栈里面的元素被称为栈帧，每当线程调用一个方法的时候就会往栈里压入一个新帧，这里的帧是用来存储方法的参数、局部变量和运算过程中的临时数据。位于“=”前的test1是一个在main()方法中定义的变量，它是一个局部变量，因此，它被会添加到了执行main()方法的主线程的java方法调用栈中，而“=”将把这个test1变量指向堆区中的Sample实例，也就是说，它持有指向Sample实例的引用 接下来，JAVA虚拟机将继续执行后续指令，在堆区里继续创建另一个Sample实例，然后依次执行它们的printName()方法。当JAVA虚拟机执行test1.printName()方法时，JAVA虚拟机根据局部变量test1持有的引用，定位到堆区中的Sample实例，再根据Sample实例持有的引用，定位到方法去中Sample类的类型信息，从而获得printName()方法的字节码，接着执行printName()方法包含的指令 六、疑问区1、Q: Java中的参数传递（传值呢？还是传引用？） A： 程序运行永远都是在栈中进行的，因而参数传递时，只存在传递基本类型和对象引用的问题，不会直接传递对象本身； 对象传递是引用值传递，原始类型数据传递是值传递；实际上这个传入函数的值是对象引用的拷贝，即传递的是引用的地址值，所以还是按值传递。 2、Q: Java对象的大小如何计算？ A： 1Object obj = new Object(); 这样在程序中完成了一个java对象的声明，obj对象所占的空间为： 14byte（java栈中保存引用的所需要空间）+ 8byte（java堆中对象所需的空间） = 12byte 所有的java非基本类型的对象都需要默认继承Object对象，因此不论什么样的java对象，其大小都必须是大于8byte 同时java对象大小是8的整数倍，因此obj对象的大小至少为16byte 七、拓展对象引用类型分为强引用、软引用、弱引用和虚引用 1、强引用：声明对象时虚拟机生成的引用 1Sample sample = new Sample(); sample为强引用，不会被垃圾回收 2、软引用：根据系统剩余内存来决定是否需要回收 换句话说，虚拟机在发生java.lang.OutOfMemoryError时，肯定是没有软引用存在的 3、弱引用：弱引用与软引用类似，但在进行垃圾回收时，是一定会被回收掉的 因此其生命周期只存在于一个垃圾回收周期内 4、虚引用虚引用并不会决定对象的生命周期。 如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收 虚引用主要用来跟踪对象被垃圾回收器回收的活动 参考地址： https://blog.csdn.net/rodbate/article/details/72857447]]></content>
      <tags>
        <tag>原理</tag>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正向代理、反向代理和CDN的区别]]></title>
    <url>%2F2019%2F02%2F02%2F%E4%BB%A3%E7%90%86%E3%80%81CDN%2F</url>
    <content type="text"><![CDATA[正向代理、反向代理和CDN的区别 一、正向代理 正向代理位于客户端和源服务器之间的服务器（代理服务器）； 隐藏客户端：由代理服务器代替客户端去访问目标服务器，用户需要设置代理服务器的IP和端口； 每一次请求是到代理服务器，代理服务器转发请求到真实服务器并获取结果返回给客户端 作用： 翻墙：绕过无法访问的结点，从另外一条路由路径进行目标服务器的访问； 缓存：数据缓存在代理服务器上，如果客户端请求的内容在缓存中则不去访问目标主机； 权限控制：防火墙授权代理服务器访问权限，客户端通过正向代理可以通过防火墙； 隐藏访问者：通过配置，目标服务器无法获取真实客户端信息，只能获取到代理服务器的信息 二、反向代理 对于客户端而言，反向代理服务器像是原始服务器； 隐藏真实服务器：代理服务器代替目标服务器去接受并返回客户端的请求 作用： 隐藏真实服务器：防止服务器恶意攻击等； 缓存作用：数据缓存在代理服务器上，如果客户端请求的内容在缓存中则不去访问目标主机； 负载均衡：如nginx 正向代理和反向代理的区别重点： 正向代理：代理端代理的是客户端。反向代理：代理端代理的是服务端。 两图（来自知乎和其他网络途径） 三、CDN全称：Content Delivery Network内容分发网络 解决问题： 尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和缓解（解决网络拥堵的状况）； 使得用户可就近取得所需内容； 提高用户访问网站的速度 原理：对域名设置CNAME，CNAME指向CDN服务商，在DNS解析时使用全局负载均衡DNS解析，如可以根据地理位置信息解析对应的IP地址，使得用户能就近访问]]></content>
      <categories>
        <category>概念</category>
      </categories>
      <tags>
        <tag>原理</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux tee 命令]]></title>
    <url>%2F2018%2F05%2F16%2Flinux-tee%2F</url>
    <content type="text"><![CDATA[tee命令一、命令作用读取标准输入的数据，并将其内容输出成文件 二、使用tee [-ai][-help][-version][file…] (文件一个或者多个) 参数： -a ：内容以追加的方式输出添加到文件 -i ：忽略中断信号 -help ：帮助 -version ：版本信息 三、举例1make 2&gt;&amp;1 | tee build.log make ：手动编译 2&gt;&amp;1 ：0-stdin（标准输入）、1-stdout（标准输出）、2-stderr（标准错误） 2&gt;&amp;1表示 ： 2&gt;是将标准错误重定向到指定地方，&amp;1是标准输出，整一个意思就是将标准错误输出到标准输出中 make &gt; build.log ： 是将所有标准输出到这个文件中，并没有定义标准错误应该是定义到了标准输出，也就是说如果make执行出现错误，那么就不会写到build.log中，而是输出到屏幕上， 2&gt;&amp;1是错误和结果都重定向到build.log中。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux ln 软、硬链接命令]]></title>
    <url>%2F2018%2F05%2F16%2Flinux-ln%2F</url>
    <content type="text"><![CDATA[ln一、命令作用为某一个文件或目录在另外一个位置建立一个同步的链接，类似Windows下的超级链接，无论改动哪一处，另外的文件都会发生改变。 二、使用ln [-s] 源文件目录或者位置 目的文件目录或者位置 三、举例1、创建链接1ln -s /usr/local/rabbitmq-server-3.6.6 /opt/rabbitmq 将/opt/rabbitmq该目录指向了/usr/local/rabbitmq-server-3.6.6，那么我在访问/opt/rabbitmq该目录的时候，就相当于访问/usr/local/rabbitmq-server-3.6.6的目录 2、删除链接1rm -rf /opt/rabbitmq 使用rm命令即可 四、软链接和硬链接1、软链接： 软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式。 软链接可以 跨文件系统 ，硬链接不可以。 软链接可以对一个不存在的文件名进行链接。 软链接可以对目录进行链接。 2、硬链接: 硬链接，以文件副本的形式存在。但不占用实际空间。 不允许给目录创建硬链接 硬链接只有在同一个文件系统中才能创建]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ElasticSearch-painless 遇到的问题]]></title>
    <url>%2F2018%2F04%2F07%2Fes-painless%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
        <tag>Script脚本</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown语法]]></title>
    <url>%2F2018%2F04%2F07%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[MarkDown一、bash命令行、代码快或者作为1$ hexo new "My New Post" 12代码快asd 12345var num = 0;for (var i = 0; i &lt; 5; i++) &#123; num+=i;&#125;console.log(num); 二、特别字符【可做高亮】en en System.out.println(&quot;test&quot;)! A backtick-delimited string ina code span: `foo` Please don’t use any &lt;blink&gt; tags. 三、单行引用和多行并列引用 引用 aaaaaaaaa bbbbbbbbb cccccccccc 四、有序列表 1 2 3 1.2.3. 选项一 选项二 [选项3] onetest 五、字体1.粗体 2.斜体 3.粗体+斜体 4.删除线 六、分割线【—或者***】 七、键盘快捷键和数字上下标Ctrl+C Za Za 八、引用链接这是一个链接到谷歌^1的。 九、邮箱&#98;&#101;&#x6e;&#x73;&#111;&#x6e;&#x5f;&#x6c;&#x69;&#97;&#110;&#103;&#x62;&#x69;&#110;&#x67;&#64;&#x31;&#x36;&#x33;&#46;&#99;&#x6f;&#109; 十、表格两种表达方式 注 :代表对齐方式 , : 与 | 之间不要有空格，否则对齐会有些不兼容 a b c 居中 左对齐 右对齐 ========= =============== ============ 简约写法 a b c 居中 左对齐 右对齐 ============ ================= ============= 十一、文字链接和图片链接More info: Deployment 百度]]></content>
      <categories>
        <category>概念</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
        <tag>语法</tag>
      </tags>
  </entry>
</search>
